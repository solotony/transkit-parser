from random import randint
import pickle
import os

class StatusIterator:
    ''' Iterator class '''
    def __init__(self, status):
        # Team object reference
        self._status = status

    def __next__(self):
        ''''Returns the next value from status object's lists '''
        while True:
            if self._status._current_position >= len(self._status._status):
                self._status._current_position = 0
            item = self._status._status[self._status._current_position]
            self._status._current_position += 1
            item[2] = (item[2] + 1) % item[1]
            if item[2] == 0:
                self._status.save()
                return item[0]

FILE = 'status.pickle'

class Status:

    def __init__(self):
        self._status = list()
        self._transmissions = dict()
        self._current_position = 0
        self.day = 0

    def update(self, name, quantity):
        if quantity < 1: quantity = 1
        if quantity > 20: quantity = 20
        if name not in status._transmissions:
            info = [name, quantity, randint(0, quantity - 1)]
            self._transmissions[name] = info
            self._status.append(info)
        else:
            info = self._transmissions[name]
            info[1] = quantity
            info[2] = info[2] % info[1]

    def __iter__(self):
        ''' Returns the Iterator object '''
        return StatusIterator(self)

    @classmethod
    def load(cls):
        if not os.path.isfile(FILE):
            status = cls()
            status.save()
            return status
        with open(FILE, 'rb') as file:
            return pickle.load(file)

    def save(self):
        with open(FILE, 'wb') as file:
            pickle.dump(self, file)

    def new_day(self):
        self.day += 1

status = Status.load()
status.new_day()

TRANSMISSIONS = [
    (1, '-'*100),
    (1, 'DPO, AL4'),
    (1, '09G, TF-60SN'),
    (1, 'DCT450 (DSG)'),
    (1, '02E, DQ250 (DSG)'),
    (1, '0AW (CVT)'),
    (1, 'A6GF1'),
    (1, 'A6LF1, A6LF2'),
    (1, 'A6MF1, A6MF2, A6MF3'),
    (1, 'JF011E, RE0F10A (CVT)'),
    (1, 'JF015E, RE0F11A (CVT)'),
    (1, 'JF016E, RE0F10D (CVT)'),
    (1, 'JF017E, RE0F10E (CVT)'),
    (1, 'U140'),
    (1, 'U150'),
    (1, 'U660E'),
    (1, 'U760E'),
    (1, 'JF010E, RE0F09A (CVT)'),
    (1, 'ZF6HP19'),
    (1, 'ZF6HP19A'),
    (1, 'ZF6HP21'),
    (1, 'ZF6HP26'),
    (1, 'ZF6HP26A'),
    (1, '722.6'),
    (1, '722.9'),
    (1, 'M11'),
    (1, 'M78'),
    (1, '6T30'),
    (1, '6T40/45'),
    (1, 'FNR5'),
    (1, '4F27E'),
    (2, 'ZF5HP19'),
    (2, '4L60E'),
    (2, '4L65E'),
    (2, '4L70E'),
    (2, '5L40E'),
    (2, 'AW55-50SN'),
    (2, 'AW60-40LE/42LE'),
    (2, 'AW60-41SN'),
    (2, 'TF-80SC'),
    (2, 'CD4E'),
    (2, '0AM, DQ200 (DSG)'),
    (2, '0B5, DL501 (DSG)'),
    (2, '0BH, DQ500 (DSG)'),
    (2, 'DCT250 (DSG)'),
    (2, 'F4A51'),
    (2, '01M'),
    (2, '01N'),
    (2, '01P'),
    (2, '4T65E'),
    (2, '4T60E'),
    (2, 'ZF8HP45'),
    (2, 'A4AF-3, A4BF-3'),
    (2, '4EAT-F'),
    (2, '4EAT-G'),
    (2, 'RE5R05A'),
    (2, 'JF506E, RE5F01A'),
    (2, 'A4CF1, A4CF2'),
    (2, 'R4A51, V4A51'),
    (2, 'F4A41'),
    (2, '09D, TR-60SN'),
    (3, '09K'),
    (3, '09M'),
    (3, 'F4A42'),
    (3, 'R5A51, V5A51'),
    (3, 'F5A51'),
    (3, 'A750E, A750F'),
    (3, 'A760E, A761E'),
    (3, 'A604'),
    (3, 'A606, 42LE'),
    (3, 'A500, 42RE, 44RE'),
    (3, 'ZF6HP28'),
    (3, 'ZF6HP28A'),
    (3, '6L45E'),
    (3, '6L50E'),
    (3, 'U240'),
    (3, 'U250'),
    (3, 'U340, U341'),
    (3, 'U440E'),
    (3, 'U441E'),
    (3, 'U540E'),
    (3, '6F35'),
    (3, '4L60'),
    (3, '5R55E'),
    (3, '5R55N'),
    (3, '5R55S'),
    (3, '5R55W'),
    (3, '722.3'),
    (3, 'F4A33'),
    (3, 'JF405E'),
    (3, 'JF414E'),
    (4, 'ZF5HP24'),
    (4, 'AW81-40LE'),
    (4, 'E4OD'),
    (4, 'AX4N, 4F50N'),
    (4, 'AX4S'),
    (4, 'AXOD'),
    (4, 'AW50-40LE, AW50-42LE'),
    (4, '3L80'),
    (4, '4L80E'),
    (4, '3T40'),
    (4, '5EAT'),
    (4, '5L50E'),
    (4, 'AW50-40LN/M, AW50-42LN/M'),
    (4, '62TE'),
    (4, '68RFE'),
    (4, '6F50'),
    (4, '6F55'),
    (4, '6L80E'),
    (4, '6L90E'),
    (4, '6R60'),
    (4, '6R80'),
    (4, '6T70/75'),
    (4, 'AXODE'),
    (4, 'AW55-51SN'),
    (4, '42RLE'),
    (4, 'AW30-43LE'),
    (4, 'AW372, KM148, A44D, 03-72'),
    (4, 'AW450-43LE'),
    (4, '4T80E'),
    (4, '4L30E'),
    (5, 'AW70/A42D/AW71/A43D/03-70'),
    (5, 'AWF8F35, U880E, TG-81SC'),
    (5, '97'),
    (5, '95,096'),
    (5, '98'),
    (5, 'ZF4HP14'),
    (5, '10'),
    (5, 'SR410, SR412'),
    (5, 'ZF8HP70'),
    (5, 'ZF5HP24A'),
    (5, 'RE4F04A'),
    (5, 'TR-80SD'),
    (5, 'RE4F02A'),
    (5, 'RE4F03A'),
    (5, 'ZF4HP22'),
    (5, 'ZF4HP24'),
    (5, 'ZF4HP24A'),
    (5, 'ZF5HP18'),
    (5, 'ZF5HP30'),
    (5, 'RE4R03A, JR404E'),
    (5, 'XA-15LN (CVT)'),
    (5, 'ZF4HP16'),
    (5, '4L40E'),
    (5, 'ZF4HP18'),
    (5, '722.8'),
    (5, '4R100'),
    (5, '4R44E, 4R55E'),
    (5, 'F5A42'),
    (5, '4T40E'),
    (5, '4T45E'),
    (6, '01J (CVT) AUDI'),
    (6, '45RFE, 5-45RFE, 65RFE'),
    (6, 'RE4R01A, JR402E'),
    (6, 'JF010E, RE0F09A (CVT)'),
    (6, 'JF012E, RE0F21A (CVT)'),
    (6, 'ZF3HP22'),
    (6, '4N71B'),
    (6, '845RE'),
    (6, '722.7'),
    (6, 'ZF4HP20'),
    (6, 'A404'),
    (6, 'TF-60SN'),
    (6, 'TF-70SC'),
    (6, 'TF-72SC'),
    (6, '722.5'),
    (6, 'JF009E, RE0F08A (CVT)'),
    (6, 'JF018E, RE0F10H (CVT)'),
    (6, 'JF019E, RE0F10J (CVT)'),
    (6, 'JF402E'),
    (6, 'JF403E'),
    (6, 'JF404E'),
    (6, 'R4AX-EL'),
    (6, 'A618, 47RH, 47RE'),
    (6, 'A518, 46RE, 46RH'),
    (6, 'A540E'),
    (6, 'A541E'),
    (6, 'A5CF1, A5CF2'),
    (6, 'A5GF1'),
    (6, 'A5HF1'),
    (6, 'JF613E, F6AJA'),
    (7, 'RE0F06A, JF006E (CVT)'),
    (7, '48RE'),
    (7, 'W4A33'),
    (7, '03-72LE, A44DE'),
    (7, 'A340-SERIES'),
    (7, 'AB60E, AB60F'),
    (7, '5R110W'),
    (7, '3L30'),
    (7, 'A6LF3'),
    (7, 'JR710E'),
    (7, 'AODE'),
    (7, 'DCT470 (DSG)'),
    (7, 'W4A32'),
    (7, 'JR711E'),
    (7, 'A4AF-1, F4A32, F4A32-1'),
    (7, 'A4AF-2'),
    (7, 'TF-81SC'),
    (7, 'TF-82SC'),
    (7, 'A4BF-1'),
    (7, 'A4BF-2'),
    (7, 'ZF6HP32'),
    (7, 'ZF6HP32A'),
    (7, '722.4'),
    (7, 'A650E'),
    (7, 'A727'),
    (7, 'FS5A-EL'),
    (7, 'FW6A-EL'),
    (7, 'BTR'),
    (7, 'A4LD'),
    (7, 'TF-80SD'),
    (8, 'AOD'),
    (8, 'JR403E'),
    (8, 'JR405E'),
    (8, 'JR507E'),
    (8, 'A8LR1'),
    (8, 'A904'),
    (8, '720.5'),
    (8, '722.1, 722.2'),
    (8, 'A40'),
    (8, 'MX17'),
    (8, '8L90'),
    (8, 'A40D, 03-50, 03-51, 03-60'),
    (8, 'A42DL, A43DL, A44DL, A45DL, A45DF'),
    (8, 'A440F'),
    (8, 'A442F'),
    (8, 'TR580 (CVT)'),
    (8, 'TR690 (CVT)'),
    (8, 'TW-40E'),
    (8, 'A47DE'),
    (8, 'A343F'),
    (8, 'A341E'),
    (8, 'ZF8HP50'),
    (8, 'ZF8HP55A'),
    (8, 'AS68RC, A465'),
    (8, 'ZF8HP90'),
    (8, 'ZF9HP48'),
    (8, 'VT2 (CVT)'),
    (8, 'VT20E, VT25E (CVT)'),
    (8, 'V4A11, V4A12'),
    (8, '850RE'),
    (8, 'A130'),
    (8, 'A140E'),
    (8, 'A172'),
    (8, 'A174'),
    (8, 'A240'),
    (8, 'A245E'),
    (8, '87'),
    (8, 'A341E'),
    (8, 'A350E'),
    (8, 'A3LB1, A3S'),
    (8, 'FMX'),
    (8, 'A960E'),
    (8, 'AA80E'),
    (8, 'KM175'),
    (8, 'AD4'),
    (8, 'AD8'),
    (8, 'TH200'),
    (8, 'TH200-4R'),
    (8, 'TH350, C'),
    (8, '3N71B'),
    (8, 'RL3F01A, RN3F01A'),
    (8, 'RL4F02A'),
    (8, 'RL4F03A'),
    (8, 'RG4R01A'),
    (8, '8L45'),
    (8, 'KM171'),
    (8, 'RC4A-EL'),
    (8, 'CFT 25/27 (CVT)'),
    (8, 'CFT23 (CVT)'),
    (8, 'CFT30 (CVT)'),
    (9, 'K110 (CVT)'),
    (9, 'K111 (CVT)'),
    (9, 'K112 (CVT)'),
    (9, 'K114 (CVT)'),
    (9, 'K115 (CVT)'),
    (9, '2203'),
    (9, 'K310 (CVT)'),
    (9, 'K311 (CVT)'),
    (9, 'K312 (CVT)'),
    (9, 'K313 (CVT)'),
    (9, 'K410 (CVT)'),
    (9, 'K411 (CVT), XA-12SN/SD'),
    (9, '03-71LE, A43DE, A46DE'),
    (9, 'L110F'),
    (9, 'LJ4AEL'),
    (9, 'CTX (CVT)'),
    (9, 'AR4'),
    (9, 'A4P'),
    (9, 'R4A-EL'),
    (9, 'P110, P111'),
    (9, 'P112'),
    (9, 'P314'),
    (9, 'QR019CHA'),
    (9, 'QR023CHA'),
    (9, 'E4N71B'),
    (9, 'F1C1 (CVT)'),
    (10, 'BZKA'),
    (10, 'A4RA'),
    (10, 'A6VA'),
    (10, 'APX4'),
    (10, 'APXA'),
    (10, 'AQ4'),
    (10, 'MR9A'),
    (10, 'ARP6'),
    (10, 'AOYA'),
    (10, 'B1JA'),
    (10, 'B36A'),
    (10, 'B46A'),
    (10, 'B4RA'),
    (10, 'B5RA'),
    (10, 'B5SA'),
    (10, 'B6VA'),
    (10, 'B7TA'),
    (10, 'B7VA'),
    (10, 'B7WA'),
    (10, 'B7XA'),
    (10, 'B7YA'),
    (10, 'B7ZA'),
    (10, 'B8CA'),
    (10, 'B90A'),
    (10, 'B97A'),
    (10, 'B98A'),
    (10, 'BAXA'),
    (10, 'BAYA'),
    (10, 'BB7A'),
    (10, 'BBSA'),
    (11, 'BZNA'),
    (11, 'GPLA'),
    (11, 'GPPA'),
    (11, 'M1WA'),
    (11, 'M24A'),
    (11, 'M41'),
    (11, 'M48A'),
    (11, 'M4TA'),
    (11, 'M4VA (CVT)'),
    (11, 'M5DA'),
    (11, 'M5HA'),
    (11, 'M5LA'),
    (11, 'M5MA'),
    (11, 'M6HA'),
    (11, 'M7PA'),
    (11, 'M7WA'),
    (11, 'M7ZA'),
    (11, 'M8SA'),
    (11, 'M91A'),
    (11, 'M9RA'),
    (11, 'MAXA'),
    (11, 'MAYA'),
    (11, 'MB1'),
    (11, 'MCJA'),
    (11, 'MCLA'),
    (11, 'MCTA'),
    (11, 'MCVA'),
    (11, 'MDKA'),
    (11, 'MDLA'),
    (11, 'MDMA'),
    (12, 'MRMA'),
    (12, 'MRVA'),
    (12, 'MT4A'),
    (12, 'MTPA(CVT)'),
    (12, 'MURA'),
    (12, 'MWWA'),
    (12, 'TAAT'),
    (12, 'MY8A'),
    (12, 'MZ2A'),
    (12, 'MZHA'),
    (12, 'MZJA'),
    (12, 'MZKA'),
    (12, 'P34A'),
    (12, 'P35A'),
    (12, 'P36A'),
    (12, 'P510'),
    (12, 'P79A'),
    (12, 'PF5A'),
    (12, 'PGRA'),
    (12, 'PJ7A'),
    (12, 'PL5X'),
    (12, 'PLWA'),
    (12, 'PN3A'),
    (12, 'PN4A'),
    (12, 'PSFA'),
    (12, 'PV1A'),
    (12, 'PV2A'),
    (12, 'PVGA'),
    (12, 'PVLA'),
    (12, 'PWR (CVT)'),
    (13, 'BBTA'),
    (13, 'BCLA'),
    (13, 'BDGA'),
    (13, 'BDHA'),
    (13, 'BDKA'),
    (13, 'BDRA'),
    (13, 'BGFA'),
    (13, 'BGHA'),
    (13, 'BGRA'),
    (13, 'BJFA'),
    (13, 'BK3A'),
    (13, 'BK4A'),
    (13, 'BMXA'),
    (13, 'BOYA'),
    (13, 'BRZA'),
    (13, 'BT3A'),
    (13, 'BTR'),
    (13, 'BV1A'),
    (13, 'BVGA'),
    (13, 'BVLA'),
    (13, 'BW35'),
    (13, 'BW37'),
    (13, 'BWEA'),
    (13, 'BY9A'),
    (13, 'BYBA'),
    (13, 'BYFA'),
    (13, 'BYKA'),
    (13, 'BZ0A'),
    (13, 'BZHA'),
    (13, 'BZJA'),
    (14, 'MDPA'),
    (14, 'MDRA'),
    (14, 'MDWA'),
    (14, 'MFHA'),
    (14, 'MGFA'),
    (14, 'MGHA'),
    (14, 'MHTA (CVT)'),
    (14, 'MJ3'),
    (14, 'MJBA'),
    (14, 'MJFA'),
    (14, 'MKYA'),
    (14, 'MKZA'),
    (14, 'ML4A'),
    (14, 'ML5X'),
    (14, 'MLYA (CVT)'),
    (14, 'MM2A'),
    (14, 'MM7A'),
    (14, 'MMGA'),
    (14, 'MP1A'),
    (14, 'MP5A'),
    (14, 'MP7A'),
    (14, 'MPCA'),
    (14, 'MPJA'),
    (14, 'MPOA'),
    (14, 'MPRA'),
    (14, 'MPSA'),
    (14, 'MPWA'),
    (14, 'MPXA'),
    (14, 'MPYA'),
    (14, 'MPZA'),
    (15, 'PX4B'),
    (15, 'PY8A'),
    (15, 'PYRA'),
    (15, 'RPS (CVT)'),
    (15, 'S4XA'),
    (15, 'SBLA (CVT)'),
    (15, 'SDMA'),
    (15, 'SETA (CVT)'),
    (15, 'SKWA'),
    (15, 'SLXA'),
    (15, 'SLYA (CVT)'),
    (15, 'SMDA'),
    (15, 'SMLA (CVT)'),
    (15, 'SMMA'),
    (15, 'SP5A'),
    (15, 'SP7A'),
    (15, 'SPCA'),
    (15, 'SPSA (CVT)'),
    (15, 'STYA (CVT)'),
    (15, 'SWRA (CVT)'),
    (15, 'SZCA (CVT)'),
]
for x in TRANSMISSIONS:
    status.update(x[1], x[0])
    if x[0] < 1: x[0] = 1
    if x[0] > 32: x[0] = 32
    name = x[1].strip().upper()

iterator = iter(status)

print("{}-й день".format(status.day))
for j in range(0, 30):
    transmission = next(iterator)
    print('', transmission)